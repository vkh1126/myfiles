1 Explain the use of java script ?
ans:Javascript is used by programmers across the world to create dynamic and interactive web content like applications and browsers
     here are some basic things java script is used for:
	 1.     Adding interactive behavior to web pages
JavaScript allows users to interact with web pages. There are almost no limits to the things you can do with JavaScript on a web page – these are just a few examples:

Show or hide more information with the click of a button

Change the color of a button when the mouse hovers over it

Slide through a carousel of images on the homepage

Zooming in or zooming out on an image

Displaying a timer or count-down on a website

Playing audio and video in a web page

Displaying animations

Using a drop-down hamburger menu

  2.     Creating web and mobile apps
Developers can use various JavaScript frameworks for developing and building web and mobile apps. JavaScript frameworks are collections of JavaScript code libraries that provide developers with pre-written code to use for routine programming features and tasks—literally a framework to build websites or web applications around. 

Popular JavaScript front-end frameworks include React, React Native, Angular, and Vue. Many companies use Node.js, a JavaScript runtime environment built on Google Chrome’s JavaScript V8 engine. A few famous examples include Paypal, LinkedIn, Netflix, and Uber!
	 
	3.     Building web servers and developing server applications
Beyond websites and apps, developers can also use JavaScript to build simple web servers and develop the back-end infrastructure using Node.js.  
4.     Game development
Of course, you can also use JavaScript to create browser games. These are a great way for beginning developers to practice their JavaScript skills. 
2. Difference between client-side scripting and server-side scripting : 

Client-side scripting:Client-side means that the processing takes place on the user's computer. It requires browsers to run the scripts on the client machine without involving any processing on the server.

Server-side scripting:Server-side means that the processing takes place on a web server.

 
3. What is Nodejs?
   Node.js is an open-source, cross-platform, back-end JavaScript runtime environment that runs on the V8 engine and executes JavaScript code outside a web browser, which was designed to build scalable network applications.
   
4. Explain Scope in JavaScript?
Scope determines the accessibility (visibility) of variables.

JavaScript has 3 types of scope:

Block scope
Function scope
Global scope
Block Scope:
Before ES6 (2015), JavaScript had only Global Scope and Function Scope.

ES6 introduced two important new JavaScript keywords: let and const.

These two keywords provide Block Scope in JavaScript.

Variables declared inside a { } block cannot be accessed from outside the block:
Local Scope
Variables declared within a JavaScript function, become LOCAL to the function.
Local variables have Function Scope:

They can only be accessed from within the function.


Function Scope
JavaScript has function scope: Each function creates a new scope.

Variables defined inside a function are not accessible (visible) from outside the function.

Variables declared with var, let and const are quite similar when declared inside a function.

They all have Function Scope:


5. JavaScript is asynchronous or synchronous.
JavaScript is a synchronous, blocking, single-threaded language. That just means that only one operation can be in progress at a time.



6. JavaScript is Single-threaded or Multi-threaded.
 Javascript is single threaded and only one line of code can be executed at any given time.
 
 
7. Explain DOM in your own word.
   The Document Object Model (DOM) is a programming API for HTML and XML documents. It defines the logical structure of documents and the way a document is accessed and manipulated. In the DOM specification, the term "document" is used in the broad sense - increasingly, XML is being used as a way of representing many different kinds of information that may be stored in diverse systems, and much of this would traditionally be seen as data rather than as documents. Nevertheless, XML presents this data as documents, and the DOM may be used to manage this data.

With the Document Object Model, programmers can create and build documents, navigate their structure, and add, modify, or delete elements and content. Anything found in an HTML or XML document can be accessed, changed, deleted, or added using the Document Object Model, with a few exceptions - in particular, the DOM interfaces for the internal subset and external subset have not yet been specified.

As a W3C specification, one important objective for the Document Object Model is to provide a standard programming interface that can be used in a wide variety of environments and applications. The Document Object Model can be used with any programming language. 


